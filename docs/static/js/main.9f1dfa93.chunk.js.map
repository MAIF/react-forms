{"version":3,"sources":["WrapperError.js","Playground.js","schema/largeForm.js","schema/formArray.js","Storybook.js","Tabs.js","ReleaseCandidate.js","index.js"],"names":["WrapperError","state","error","undefined","this","setState","props","children","React","Component","examples","basic","largeForm","formArray","constrainedBasic","constraintsWithRef","simpleSelector","formInForm","dynamicForm","Playground","useState","JSON","stringify","schema","setSchema","realSchema","setRealSchema","setError","value","setValue","label","selectedSchema","setSelectedSchema","childRef","useRef","formRef","useEffect","current","reset","babelize","e","code","generatedCode","babel","presets","replace","trim","res","Function","func","_","className","style","marginTop","href","marginRight","htmlFor","possibleValues","Object","entries","transformer","onChange","mode","err","console","log","parse","color","backgroundColor","padding","ref","flow","keys","onSubmit","d","alert","Storybook","types","string","filter","setFilter","map","type","onClick","cursor","textDecoration","fontWeight","item","key","index","format","marginBottom","constraints","required","options","actions","submit","Tabs","tabs","defaultTab","page","setPage","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","find","content","App","firstname","lastname","age","skills","array","competence","autosubmit","data","Toto","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f1dfa93.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class WrapperError extends React.Component {\n    state = {\n        error: undefined\n    }\n\n    componentDidCatch(error) {\n        this.setState({ error })\n    }\n\n    reset() {\n        this.setState({ error: undefined })\n    }\n\n    render() {\n        if (this.state.error)\n            return <div>Something wrong happened</div>\n        return this.props.children\n    }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { Form, CodeInput, SelectInput } from '@maif/react-forms'\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport basic from './schema/basic.json';\nimport largeForm from './schema/largeForm';\nimport formArray from './schema/formArray';\nimport constrainedBasic from './schema/constrainedBasic.json';\nimport constraintsWithRef from './schema/constraintsWithRef.json';\nimport simpleSelector from './schema/selector.json';\nimport formInForm from './schema/formInForm.json';\nimport dynamicForm from './schema/dynamicForm.json';\nimport * as babel from 'babel-standalone'\nimport WrapperError from './WrapperError';\n\nconst examples = {\n  basic,\n  largeForm,\n  formArray,\n  constrainedBasic,\n  constraintsWithRef,\n  simpleSelector,\n  formInForm,\n  dynamicForm\n}\n\nexport const Playground = () => {\n  const [schema, setSchema] = useState(JSON.stringify(basic, 0, 2))\n  const [realSchema, setRealSchema] = useState(basic)\n  const [error, setError] = useState(undefined)\n  const [value, setValue] = useState()\n  const [selectedSchema, setSelectedSchema] = useState({ value: basic, label: \"basic\" })\n  const ref = useRef()\n  const childRef = useRef()\n  const formRef = useRef()\n\n  useEffect(() => {\n    if (childRef.current)\n      childRef.current.reset()\n    babelize(schema)\n  }, [schema])\n\n  useEffect(() => {\n    setError(undefined)\n  }, [realSchema])\n\n  const babelize = e => {\n    try {\n      const code = `() => { try { return ${(typeof e === 'object' ? JSON.stringify(e, null, 2) : e)} } catch(err) {} }`\n      const babelCode = babel.transform(code, { presets: ['react', 'es2015'] }).code;\n\n      const generatedCode = babelCode.replace('\"use strict\";', \"\").trim()\n      const func = new Function(\"React\", `return ${generatedCode}`);\n      const res = func(React)()\n      if (res)\n        setRealSchema(res)\n    } catch (_) {\n\n    }\n  }\n\n  return (\n      <div className=\"container\" style={{ marginTop: '70px' }}>\n        <em className='tagline px-0 py-2'>Choose a JSON schema below and check the generated form. Check the <a href='https://github.com/MAIF/react-forms'>documentation</a> for more details.</em>\n        <div className=\"d-flex\">\n          <div className='col-8' style={{ marginRight: '10px' }}>\n            <label htmlFor=\"selector\">Try with a schema</label>\n            <SelectInput\n              className=\"py-2\"\n              possibleValues={Object.entries(examples)}\n              transformer={([k, v]) => ({ label: k, value:v })}\n              value={selectedSchema}\n              onChange={e => {\n                setSelectedSchema(e)\n                setSchema(e)\n              }}\n            />\n            <CodeInput\n              mode=\"javascript\"\n              onChange={e => {\n                try {\n                  setSchema(e)\n                } catch (err) {\n                  console.log(err)\n                }\n              }}\n              value={typeof schema === 'object' ? JSON.stringify(schema, null, 2) : schema}\n            />\n            <label>Default value</label>\n            <CodeInput\n              mode=\"json\"\n              onChange={e => {\n                try {\n                  setValue(JSON.parse(e))\n                } catch (_) { }\n              }}\n              value={typeof value === 'object' ? JSON.stringify(value, null, 2) : value}\n            />\n          </div>\n          <div className='col-4 px-2'>\n            <label>Generated form</label>\n            {error && <span style={{ color: 'tomato' }}>{error}</span>}\n            <div style={{ backgroundColor: '#ececec', padding: '10px 15px' }}>\n              <WrapperError ref={childRef}>\n                <Form\n                  ref={formRef}\n                  schema={realSchema}\n                  value={value}\n                  flow={Object.keys(realSchema)}\n                  onSubmit={d => alert(JSON.stringify(d, null, 2))}\n                  // options={{\n                  //   watch: unsaved => {\n                  //     ref?.current?.dispatch({\n                  //       changes: {\n                  //         from: 0,\n                  //         to: ref.current.state.doc.length,\n                  //         insert: JSON.stringify(unsaved, null, 2)\n                  //       }\n                  //     })\n                  //   },\n                  //   actions: {\n                  //     submit: {\n                  //       label: 'Try it'\n                  //     }\n                  //   }\n                  // }}\n                />\n              </WrapperError>\n            </div>\n            <div className='py-2'>\n              <label>Form state</label>\n              {/* <CodeInput\n                setRef={r => ref.current = r}\n                showGutter={false}\n                mode=\"json\"\n              /> */}\n            </div>\n          </div>\n        </div>\n      </div>\n  )\n}\n\nexport default Playground;\n","const schema = `{\n    \"target_refs\": {\n        \"label\": \"target_refs\",\n        \"type\": \"string\",\n        \"constraints\": [\n            {\n                \"type\": \"nullable\"\n            }\n        ],\n        \"array\": true,\n        \"format\": null\n    },\n    \"root\": {\n        \"label\": \"root\",\n        \"type\": \"string\",\n        \"constraints\": [\n            {\n                \"type\": \"nullable\"\n            }\n        ]\n    },\n    \"client\": {\n        \"label\": \"client\",\n        \"type\": \"object\",\n        \"format\": \"form\",\n        \"collapsable\": true,\n        \"collapsed\": true,\n        \"schema\": {\n            \"custom_timeouts\": {\n                \"label\": \"custom_timeouts\",\n                \"type\": \"object\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ],\n                \"array\": true,\n                \"format\": \"form\",\n                \"schema\": {\n                    \"connection_timeout\": {\n                        \"label\": \"connection_timeout\",\n                        \"type\": \"number\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"call_and_stream_timeout\": {\n                        \"label\": \"call_and_stream_timeout\",\n                        \"type\": \"number\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"path\": {\n                        \"label\": \"path\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"call_timeout\": {\n                        \"label\": \"call_timeout\",\n                        \"type\": \"number\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"idle_timeout\": {\n                        \"label\": \"idle_timeout\",\n                        \"type\": \"number\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"global_timeout\": {\n                        \"label\": \"global_timeout\",\n                        \"type\": \"number\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    }\n                },\n                \"flow\": [\n                    \"connection_timeout\",\n                    \"call_and_stream_timeout\",\n                    \"path\",\n                    \"call_timeout\",\n                    \"idle_timeout\",\n                    \"global_timeout\"\n                ]\n            },\n            \"global_timeout\": {\n                \"label\": \"global_timeout\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"max_errors\": {\n                \"label\": \"max_errors\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"retry_initial_delay\": {\n                \"label\": \"retry_initial_delay\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"backoff_factor\": {\n                \"label\": \"backoff_factor\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"cache_connection_settings\": {\n                \"label\": \"cache_connection_settings\",\n                \"type\": \"object\",\n                \"format\": \"form\",\n                \"collapsable\": true,\n                \"collapsed\": true,\n                \"schema\": {\n                    \"queue_size\": {\n                        \"label\": \"queue_size\",\n                        \"type\": \"number\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"enabled\": {\n                        \"label\": \"enabled\",\n                        \"type\": \"bool\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    }\n                },\n                \"flow\": [\n                    \"queue_size\",\n                    \"enabled\"\n                ]\n            },\n            \"sample_interval\": {\n                \"label\": \"sample_interval\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"call_and_stream_timeout\": {\n                \"label\": \"call_and_stream_timeout\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"retries\": {\n                \"label\": \"retries\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"proxy\": {\n                \"label\": \"proxy\",\n                \"type\": \"object\",\n                \"format\": \"form\",\n                \"collapsable\": true,\n                \"collapsed\": true,\n                \"schema\": {},\n                \"flow\": []\n            },\n            \"call_timeout\": {\n                \"label\": \"call_timeout\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"idle_timeout\": {\n                \"label\": \"idle_timeout\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"connection_timeout\": {\n                \"label\": \"connection_timeout\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            }\n        },\n        \"flow\": [\n            \"custom_timeouts\",\n            \"global_timeout\",\n            \"max_errors\",\n            \"retry_initial_delay\",\n            \"backoff_factor\",\n            \"cache_connection_settings\",\n            \"sample_interval\",\n            \"call_and_stream_timeout\",\n            \"retries\",\n            \"proxy\",\n            \"call_timeout\",\n            \"idle_timeout\",\n            \"connection_timeout\"\n        ]\n    },\n    \"health_check\": {\n        \"label\": \"health_check\",\n        \"type\": \"object\",\n        \"format\": \"form\",\n        \"collapsable\": true,\n        \"collapsed\": true,\n        \"schema\": {\n            \"enabled\": {\n                \"label\": \"enabled\",\n                \"type\": \"bool\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"url\": {\n                \"label\": \"url\",\n                \"type\": \"string\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            }\n        },\n        \"flow\": [\n            \"enabled\",\n            \"url\"\n        ]\n    },\n    \"targets\": {\n        \"label\": \"targets\",\n        \"type\": \"object\",\n        \"constraints\": [\n            {\n                \"type\": \"nullable\"\n            }\n        ],\n        \"array\": true,\n        \"format\": \"form\",\n        \"schema\": {\n            \"predicate\": {\n                \"label\": \"predicate\",\n                \"type\": \"object\",\n                \"format\": \"form\",\n                \"collapsable\": true,\n                \"collapsed\": true,\n                \"schema\": {\n                    \"rack\": {\n                        \"label\": \"rack\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"provider\": {\n                        \"label\": \"provider\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"dataCenter\": {\n                        \"label\": \"dataCenter\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"zone\": {\n                        \"label\": \"zone\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"positions\": {\n                        \"label\": \"positions\",\n                        \"type\": \"object\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ],\n                        \"array\": true,\n                        \"format\": \"form\",\n                        \"schema\": {\n                            \"latitude\": {\n                                \"label\": \"latitude\",\n                                \"type\": \"number\",\n                                \"constraints\": [\n                                    {\n                                        \"type\": \"nullable\"\n                                    }\n                                ]\n                            },\n                            \"longitude\": {\n                                \"label\": \"longitude\",\n                                \"type\": \"number\",\n                                \"constraints\": [\n                                    {\n                                        \"type\": \"nullable\"\n                                    }\n                                ]\n                            },\n                            \"radius\": {\n                                \"label\": \"radius\",\n                                \"type\": \"number\",\n                                \"constraints\": [\n                                    {\n                                        \"type\": \"nullable\"\n                                    }\n                                ]\n                            }\n                        },\n                        \"flow\": [\n                            \"latitude\",\n                            \"longitude\",\n                            \"radius\"\n                        ]\n                    },\n                    \"type\": {\n                        \"label\": \"type\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ],\n                        \"format\": \"select\",\n                        \"options\": [\n                            \"AlwaysMatch\",\n                            \"NetworkLocationMatch\",\n                            \"GeolocationMatch\"\n                        ]\n                    },\n                    \"region\": {\n                        \"label\": \"region\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"dc\": {\n                        \"label\": \"dc\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    }\n                },\n                \"flow\": [\n                    \"rack\",\n                    \"provider\",\n                    \"dataCenter\",\n                    \"zone\",\n                    \"positions\",\n                    \"type\",\n                    \"region\",\n                    \"dc\"\n                ]\n            },\n            \"protocol\": {\n                \"label\": \"protocol\",\n                \"type\": \"string\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"hostname\": {\n                \"label\": \"hostname\",\n                \"type\": \"string\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"port\": {\n                \"label\": \"port\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"weight\": {\n                \"label\": \"weight\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"tls\": {\n                \"label\": \"tls\",\n                \"type\": \"bool\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"tls_config\": {\n                \"label\": \"tls_config\",\n                \"type\": \"object\",\n                \"format\": \"form\",\n                \"collapsable\": true,\n                \"collapsed\": true,\n                \"schema\": {\n                    \"enabled\": {\n                        \"label\": \"enabled\",\n                        \"type\": \"bool\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"certs\": {\n                        \"label\": \"certs\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ],\n                        \"array\": true,\n                        \"format\": null\n                    },\n                    \"loose\": {\n                        \"label\": \"loose\",\n                        \"type\": \"bool\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"trust_all\": {\n                        \"label\": \"trust_all\",\n                        \"type\": \"bool\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ]\n                    },\n                    \"trusted_certs\": {\n                        \"label\": \"trusted_certs\",\n                        \"type\": \"string\",\n                        \"constraints\": [\n                            {\n                                \"type\": \"nullable\"\n                            }\n                        ],\n                        \"array\": true,\n                        \"format\": null\n                    }\n                },\n                \"flow\": [\n                    \"enabled\",\n                    \"certs\",\n                    \"loose\",\n                    \"trust_all\",\n                    \"trusted_certs\"\n                ]\n            },\n            \"id\": {\n                \"label\": \"id\",\n                \"type\": \"string\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            },\n            \"ip_address\": {\n                \"label\": \"ip_address\",\n                \"type\": \"string\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            }\n        },\n        \"flow\": [\n            \"protocol\",\n            \"hostname\",\n            \"port\",\n            \"weight\",\n            \"tls\",\n            \"id\",\n            \"ip_address\",\n            \"predicate\",\n            \"tls_config\"\n        ]\n    },\n    \"rewrite\": {\n        \"label\": \"rewrite\",\n        \"type\": \"bool\",\n        \"constraints\": [\n            {\n                \"type\": \"nullable\"\n            }\n        ]\n    },\n    \"load_balancing\": {\n        \"label\": \"load_balancing\",\n        \"type\": \"object\",\n        \"format\": \"form\",\n        \"collapsable\": true,\n        \"collapsed\": true,\n        \"schema\": {\n            \"type\": {\n                \"label\": \"type\",\n                \"type\": \"string\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ],\n                \"format\": \"select\",\n                \"options\": [\n                    \"BestResponseTime\",\n                    \"IpAddressHash\",\n                    \"Random\",\n                    \"RoundRobin\",\n                    \"Sticky\",\n                    \"WeightedBestResponseTime\"\n                ]\n            },\n            \"ratio\": {\n                \"label\": \"ratio\",\n                \"type\": \"number\",\n                \"constraints\": [\n                    {\n                        \"type\": \"nullable\"\n                    }\n                ]\n            }\n        },\n        \"flow\": [\n            \"type\",\n            \"ratio\"\n        ]\n    }\n}`\n\nexport default schema","const schema = `{\n    \"users\": {\n        type: \"object\",\n        format: \"form\",\n        array: true,\n        schema: {\n            fullname: {\n                type: \"string\",\n                render: (props) => {\n                    const { setValues, setValue, value, onChange } = props\n                    return <input\n                        type=\"text\"\n                        onChange={e => onChange(e.target.value)}\n                        value={value}\n                    />\n                }\n\n            },\n            firstname: {\n                type: \"string\"\n            },\n            lastname: {\n                type: \"string\"\n            }\n        }\n    }\n}`\n\nexport default schema","import { Form, type as types, constraints } from \"@maif/react-forms\";\nimport React, { useState } from \"react\";\nimport WrapperError from \"./WrapperError\";\nimport schema from \"./schema/storybook.json\";\n\nconst Storybook = () => {\n  const [filter, setFilter] = useState(types.string);\n  return (\n    <div className=\"container\" style={{ marginTop: \"70px\" }}>\n      <div className=\"d-flex\">\n        <div className=\"col-3\" style={{ marginRight: \"10px\" }}>\n          <div\n            style={{\n              backgroundColor: \"#ececec\",\n              marginTop: \"25px\",\n              marginRight: \"15px\",\n              padding: \"15px\"\n            }}\n          >\n            <b>Filter</b>\n            <ul>\n              {Object.keys(types).map((type) => (\n                <li\n                  key={`filter-${type}`}\n                  onClick={() => setFilter(type)}\n                  style={{\n                    cursor: \"pointer\",\n                    textDecoration: \"underline\",\n                    fontWeight: type === filter ? \"bold\" : \"normal\"\n                  }}\n                >\n                  {type}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n        <div className=\"col-9\" style={{ marginRight: \"10px\" }}>\n            {Object.keys(schema)\n              .map((item) => ({ key: item, ...schema[item] }))\n              .filter(({ type }) => filter === type)\n              .map(({ key, ...item }, index) => (\n                <WrapperError key={`form-${key}-${index}`}>\n                  <label style={{ fontWeight: \"bold\" }}>\n                    Input type {item.type}\n                    {item.format && ` (format: ${item.format})`}\n                  </label>\n                  <div\n                    style={{\n                      backgroundColor: \"#ececec\",\n                      padding: \"10px 15px\",\n                      marginBottom: \"15px\"\n                    }}\n                  >\n                    <Form\n                      schema={{\n                        [key]: {\n                          constraints: [\n                            constraints.required(`${key} is required`)\n                          ],\n                          ...item\n                        }\n                      }}\n                      flow={[key]}\n                      onSubmit={(d) => alert(JSON.stringify(d, null, 2))}\n                      options={{actions:{submit:{label:\"Show It!\"}}}}\n                    />\n                  </div>\n                </WrapperError>\n              ))}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Storybook;\n","import React, { useState } from \"react\";\n\nconst Tabs = ({ tabs, defaultTab }) => {\n  const [page, setPage] = useState(defaultTab);\n\n  return (\n    <div className=\"my-md-4 bd-layout\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\n        <div className=\"container-fluid\">\n          <span className=\"navbar-brand\">react-forms playground</span>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              {tabs.map(({ id, label }) => (\n                <li className=\"nav-item\">\n                  <span className=\"nav-link\" onClick={() => setPage(id)}>\n                    {label}\n                  </span>\n                </li>\n              ))}\n              <li className=\"nav-item\">\n                <a\n                  className=\"nav-link\"\n                  href=\"https://github.com/MAIF/react-forms#readme\"\n                >\n                  Documentation\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a\n                  className=\"nav-link\"\n                  href=\"https://github.com/MAIF/react-forms\"\n                >\n                  Project\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      <div className=\"container\" style={{ marginTop: \"70px\" }}>\n        {tabs.find(({ id }) => id === page)?.content}\n      </div>\n    </div>\n  );\n};\nexport default Tabs;\n","import React, { useEffect, useImperativeHandle, useRef, useState } from \"react\";\nimport {\n    Controller,\n    useForm,\n    useController,\n    FormProvider,\n    useWatch\n} from \"react-hook-form\";\n\nimport { Form } from \"@maif/react-forms\";\n\nconst Listener = ({ control, onDataChange }) => {\n    const data = useWatch({ control });\n\n    onDataChange(data);\n\n    return null;\n};\n\nconst ControlledInput = ({ entry }) => {\n    console.log(`render-controlled ${entry}`);\n\n    const { field } = useController({\n        name: entry\n    });\n\n    return <Input field={field} />;\n};\n\nconst Input = ({ field }) => {\n    console.log(`render-input ${field.name}`);\n    return <input type=\"text\" {...field} />;\n};\n\nexport default function App() {\n    const [state, setState] = useState({\n        firstname: null,\n        lastname: \"Foo\",\n        age: 26\n    });\n\n    console.log(state);\n\n    const schema = {\n        firstname: {\n            type: \"string\"\n        },\n        lastname: {\n            type: \"string\"\n        },\n        skills: {\n            type: 'object',\n            format: 'form',\n            array: true,\n            schema: {\n                competence: {\n                    type: 'string'\n                }\n            }\n        }\n    };\n\n    console.log(state)\n\n    return (\n        <>\n            <Form\n                value={state}\n                schema={schema}\n                options={{\n                    autosubmit: true\n                }}\n                onSubmit={data => {\n                    console.log(data)\n                    setState(data)\n                }}\n            />\n            <Toto data={state} />\n        </>\n    );\n}\n\nconst Toto = ({ data }) => {\n    return <h1>{JSON.stringify(data, null, 4)}</h1>;\n};\n\nconst FormInstance = ({ onDataChange, value }) => {\n    const form = useForm({\n        defaultValues: value\n    });\n    const { handleSubmit, control, reset } = form;\n\n    return (\n        <>\n            <FormProvider {...form}>\n                <form onSubmit={handleSubmit((data) => console.log(data))}>\n                    <ControlledInput entry=\"firstname\" />\n                    <ControlledInput entry=\"lastname\" />\n                    <ControlledInput entry=\"age\" />\n                    <button type=\"submit\">Submit</button>\n                </form>\n                <Listener control={control} onDataChange={onDataChange} />\n            </FormProvider>\n\n            <button\n                onClick={() =>\n                    reset(\n                        {\n                            //firstname: \"Quentin\"\n                        },\n                        {\n                            keepDefaultValues: true\n                        }\n                    )\n                }\n            >\n                RESET\n            </button>\n            {/*<SimpleInput entry=\"firstname\" value={state.firstname} onChange={onChange} />\n      <SimpleInput entry=\"lastname\" value={state.lastname} onChange={onChange} />*/}\n        </>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Playground from './Playground';\nimport Storybook from './Storybook';\nimport Tabs from './Tabs';\nimport ReleaseCandidate from './ReleaseCandidate'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Tabs tabs={[\n      {\n        id: \"playground\",\n        label: \"Playground\",\n        content: <Playground />\n      },\n      {\n        id: \"release-candidate\",\n        label: \"Release Candidate\",\n        content: <ReleaseCandidate />\n      },\n      {\n        id: \"storybook\",\n        label: \"Storybook\",\n        content: <Storybook />\n      }]}\n      defaultTab=\"playground\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}