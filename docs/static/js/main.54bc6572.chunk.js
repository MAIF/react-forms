(this["webpackJsonp@maif/react-forms-playground"]=this["webpackJsonp@maif/react-forms-playground"]||[]).push([[0],{123:function(n){n.exports=JSON.parse('{"name":{"type":"string","label":"name","placeholder":"Your name"},"age":{"type":"number","label":"Your age"},"code":{"type":"string","format":"markdown"}}')},200:function(n){n.exports=JSON.parse('{"string":{"type":"string","placeholder":"Your placeholder"},"select":{"type":"string","format":"select","options":["option 1","option 2","option 3"]},"buttonsSelect":{"type":"string","format":"buttons","options":["option 1","option 2","option 3","option 4","option 5"]},"email":{"type":"string","format":"email"},"password":{"type":"string","format":"password"},"textarea":{"type":"string","format":"textarea"},"singleLineCode":{"type":"string","format":"singleLineCode","defaultValue":"const person = {name:\'Bob\',age:12}"},"markdown":{"type":"string","format":"markdown","defaultValue":"TEST\\n- un\\n- deux\\n- trois"},"array-of-string":{"type":"string","array":true},"hidden":{"type":"string","format":"hidden","defaultValue":"the hidden value"},"number":{"type":"number"},"array-of-number":{"type":"number","array":true},"buttonsSelect-number":{"type":"number","format":"buttons","options":[1,2,3,4,5,6,7,8,9,10]},"date":{"type":"date"},"array-of-date":{"type":"date","array":true},"bool":{"type":"bool"},"file":{"type":"file"},"object":{"type":"object"},"code":{"type":"object","format":"code"},"form":{"type":"object","format":"form","label":"Personne","schema":{"name":{"type":"string","placeholder":"Your name"},"age":{"type":"number","placeholder":"Your age"}}},"buttonsSelect-object":{"type":"object","format":"buttons","options":[{"object":1},{"object":2},{"object":3}]}}')},2306:function(n,e,t){},2309:function(n,e,t){"use strict";t.r(e);var a=t(1),l=t.n(a),r=t(60),o=t.n(r),s=(t(435),t(36)),c=t(58),i=(t(2306),t(2307),t(123)),b=t(418),u=t(419),p=t(420),m=t(421),d=t(422),y=t(423),f=t(7),j=t(8),g=t(20),h=t(21),O=t(11),x=function(n){Object(g.a)(t,n);var e=Object(h.a)(t);function t(){var n;Object(f.a)(this,t);for(var a=arguments.length,l=new Array(a),r=0;r<a;r++)l[r]=arguments[r];return(n=e.call.apply(e,[this].concat(l))).state={error:void 0},n}return Object(j.a)(t,[{key:"componentDidCatch",value:function(n){this.setState({error:n})}},{key:"reset",value:function(){this.setState({error:void 0})}},{key:"render",value:function(){return this.state.error?Object(O.jsx)("div",{children:"Something wrong happened"}):this.props.children}}]),t}(l.a.Component),_={basic:i,largeForm:'{\n    "target_refs": {\n        "label": "target_refs",\n        "type": "string",\n        "constraints": [\n            {\n                "type": "nullable"\n            }\n        ],\n        "array": true,\n        "format": null\n    },\n    "root": {\n        "label": "root",\n        "type": "string",\n        "constraints": [\n            {\n                "type": "nullable"\n            }\n        ]\n    },\n    "client": {\n        "label": "client",\n        "type": "object",\n        "format": "form",\n        "collapsable": true,\n        "collapsed": true,\n        "schema": {\n            "custom_timeouts": {\n                "label": "custom_timeouts",\n                "type": "object",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ],\n                "array": true,\n                "format": "form",\n                "schema": {\n                    "connection_timeout": {\n                        "label": "connection_timeout",\n                        "type": "number",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "call_and_stream_timeout": {\n                        "label": "call_and_stream_timeout",\n                        "type": "number",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "path": {\n                        "label": "path",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "call_timeout": {\n                        "label": "call_timeout",\n                        "type": "number",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "idle_timeout": {\n                        "label": "idle_timeout",\n                        "type": "number",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "global_timeout": {\n                        "label": "global_timeout",\n                        "type": "number",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    }\n                },\n                "flow": [\n                    "connection_timeout",\n                    "call_and_stream_timeout",\n                    "path",\n                    "call_timeout",\n                    "idle_timeout",\n                    "global_timeout"\n                ]\n            },\n            "global_timeout": {\n                "label": "global_timeout",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "max_errors": {\n                "label": "max_errors",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "retry_initial_delay": {\n                "label": "retry_initial_delay",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "backoff_factor": {\n                "label": "backoff_factor",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "cache_connection_settings": {\n                "label": "cache_connection_settings",\n                "type": "object",\n                "format": "form",\n                "collapsable": true,\n                "collapsed": true,\n                "schema": {\n                    "queue_size": {\n                        "label": "queue_size",\n                        "type": "number",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "enabled": {\n                        "label": "enabled",\n                        "type": "bool",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    }\n                },\n                "flow": [\n                    "queue_size",\n                    "enabled"\n                ]\n            },\n            "sample_interval": {\n                "label": "sample_interval",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "call_and_stream_timeout": {\n                "label": "call_and_stream_timeout",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "retries": {\n                "label": "retries",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "proxy": {\n                "label": "proxy",\n                "type": "object",\n                "format": "form",\n                "collapsable": true,\n                "collapsed": true,\n                "schema": {},\n                "flow": []\n            },\n            "call_timeout": {\n                "label": "call_timeout",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "idle_timeout": {\n                "label": "idle_timeout",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "connection_timeout": {\n                "label": "connection_timeout",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            }\n        },\n        "flow": [\n            "custom_timeouts",\n            "global_timeout",\n            "max_errors",\n            "retry_initial_delay",\n            "backoff_factor",\n            "cache_connection_settings",\n            "sample_interval",\n            "call_and_stream_timeout",\n            "retries",\n            "proxy",\n            "call_timeout",\n            "idle_timeout",\n            "connection_timeout"\n        ]\n    },\n    "health_check": {\n        "label": "health_check",\n        "type": "object",\n        "format": "form",\n        "collapsable": true,\n        "collapsed": true,\n        "schema": {\n            "enabled": {\n                "label": "enabled",\n                "type": "bool",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "url": {\n                "label": "url",\n                "type": "string",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            }\n        },\n        "flow": [\n            "enabled",\n            "url"\n        ]\n    },\n    "targets": {\n        "label": "targets",\n        "type": "object",\n        "constraints": [\n            {\n                "type": "nullable"\n            }\n        ],\n        "array": true,\n        "format": "form",\n        "schema": {\n            "predicate": {\n                "label": "predicate",\n                "type": "object",\n                "format": "form",\n                "collapsable": true,\n                "collapsed": true,\n                "schema": {\n                    "rack": {\n                        "label": "rack",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "provider": {\n                        "label": "provider",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "dataCenter": {\n                        "label": "dataCenter",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "zone": {\n                        "label": "zone",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "positions": {\n                        "label": "positions",\n                        "type": "object",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ],\n                        "array": true,\n                        "format": "form",\n                        "schema": {\n                            "latitude": {\n                                "label": "latitude",\n                                "type": "number",\n                                "constraints": [\n                                    {\n                                        "type": "nullable"\n                                    }\n                                ]\n                            },\n                            "longitude": {\n                                "label": "longitude",\n                                "type": "number",\n                                "constraints": [\n                                    {\n                                        "type": "nullable"\n                                    }\n                                ]\n                            },\n                            "radius": {\n                                "label": "radius",\n                                "type": "number",\n                                "constraints": [\n                                    {\n                                        "type": "nullable"\n                                    }\n                                ]\n                            }\n                        },\n                        "flow": [\n                            "latitude",\n                            "longitude",\n                            "radius"\n                        ]\n                    },\n                    "type": {\n                        "label": "type",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ],\n                        "format": "select",\n                        "options": [\n                            "AlwaysMatch",\n                            "NetworkLocationMatch",\n                            "GeolocationMatch"\n                        ]\n                    },\n                    "region": {\n                        "label": "region",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "dc": {\n                        "label": "dc",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    }\n                },\n                "flow": [\n                    "rack",\n                    "provider",\n                    "dataCenter",\n                    "zone",\n                    "positions",\n                    "type",\n                    "region",\n                    "dc"\n                ]\n            },\n            "protocol": {\n                "label": "protocol",\n                "type": "string",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "hostname": {\n                "label": "hostname",\n                "type": "string",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "port": {\n                "label": "port",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "weight": {\n                "label": "weight",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "tls": {\n                "label": "tls",\n                "type": "bool",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "tls_config": {\n                "label": "tls_config",\n                "type": "object",\n                "format": "form",\n                "collapsable": true,\n                "collapsed": true,\n                "schema": {\n                    "enabled": {\n                        "label": "enabled",\n                        "type": "bool",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "certs": {\n                        "label": "certs",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ],\n                        "array": true,\n                        "format": null\n                    },\n                    "loose": {\n                        "label": "loose",\n                        "type": "bool",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "trust_all": {\n                        "label": "trust_all",\n                        "type": "bool",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ]\n                    },\n                    "trusted_certs": {\n                        "label": "trusted_certs",\n                        "type": "string",\n                        "constraints": [\n                            {\n                                "type": "nullable"\n                            }\n                        ],\n                        "array": true,\n                        "format": null\n                    }\n                },\n                "flow": [\n                    "enabled",\n                    "certs",\n                    "loose",\n                    "trust_all",\n                    "trusted_certs"\n                ]\n            },\n            "id": {\n                "label": "id",\n                "type": "string",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            },\n            "ip_address": {\n                "label": "ip_address",\n                "type": "string",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            }\n        },\n        "flow": [\n            "protocol",\n            "hostname",\n            "port",\n            "weight",\n            "tls",\n            "id",\n            "ip_address",\n            "predicate",\n            "tls_config"\n        ]\n    },\n    "rewrite": {\n        "label": "rewrite",\n        "type": "bool",\n        "constraints": [\n            {\n                "type": "nullable"\n            }\n        ]\n    },\n    "load_balancing": {\n        "label": "load_balancing",\n        "type": "object",\n        "format": "form",\n        "collapsable": true,\n        "collapsed": true,\n        "schema": {\n            "type": {\n                "label": "type",\n                "type": "string",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ],\n                "format": "select",\n                "options": [\n                    "BestResponseTime",\n                    "IpAddressHash",\n                    "Random",\n                    "RoundRobin",\n                    "Sticky",\n                    "WeightedBestResponseTime"\n                ]\n            },\n            "ratio": {\n                "label": "ratio",\n                "type": "number",\n                "constraints": [\n                    {\n                        "type": "nullable"\n                    }\n                ]\n            }\n        },\n        "flow": [\n            "type",\n            "ratio"\n        ]\n    }\n}',formArray:'{\n    "users": {\n        type: "object",\n        format: "form",\n        array: true,\n        schema: {\n            fullname: {\n                type: "string",\n                render: (props) => {\n                    const { setValues, setValue, value, onChange } = props\n                    return <input\n                        type="text"\n                        onChange={e => onChange(e.target.value)}\n                        value={value}\n                    />\n                }\n\n            },\n            firstname: {\n                type: "string"\n            },\n            lastname: {\n                type: "string"\n            }\n        }\n    }\n}',constrainedBasic:b,constraintsWithRef:u,simpleSelector:p,formInForm:m,dynamicForm:d},v=function(){var n=Object(a.useState)(JSON.stringify(i,0,2)),e=Object(s.a)(n,2),t=e[0],r=e[1],o=Object(a.useState)(i),b=Object(s.a)(o,2),u=b[0],p=b[1],m=Object(a.useState)(void 0),d=Object(s.a)(m,2),f=d[0],j=d[1],g=Object(a.useState)(),h=Object(s.a)(g,2),v=h[0],w=h[1],N=Object(a.useState)({value:i,label:"basic"}),S=Object(s.a)(N,2),k=S[0],C=S[1],J=(Object(a.useRef)(),Object(a.useRef)()),q=Object(a.useRef)();Object(a.useEffect)((function(){J.current&&J.current.reset(),A(t)}),[t]),Object(a.useEffect)((function(){j(void 0)}),[u]);var A=function(n){try{var e="() => { try { return ".concat("object"===typeof n?JSON.stringify(n,null,2):n," } catch(err) {} }"),t=y.transform(e,{presets:["react","es2015"]}).code.replace('"use strict";',"").trim(),a=new Function("React","return ".concat(t))(l.a)();a&&p(a)}catch(r){}};return Object(O.jsxs)("div",{className:"container",style:{marginTop:"70px"},children:[Object(O.jsxs)("em",{className:"tagline px-0 py-2",children:["Choose a JSON schema below and check the generated form. Check the ",Object(O.jsx)("a",{href:"https://github.com/MAIF/react-forms",children:"documentation"})," for more details."]}),Object(O.jsxs)("div",{className:"d-flex",children:[Object(O.jsxs)("div",{className:"col-8",style:{marginRight:"10px"},children:[Object(O.jsx)("label",{htmlFor:"selector",children:"Try with a schema"}),Object(O.jsx)(c.c,{className:"py-2",possibleValues:Object.entries(_),transformer:function(n){var e=Object(s.a)(n,2);return{label:e[0],value:e[1]}},value:k,onChange:function(n){C(n),r(n)}}),Object(O.jsx)(c.a,{mode:"javascript",onChange:function(n){try{r(n)}catch(e){console.log(e)}},value:"object"===typeof t?JSON.stringify(t,null,2):t}),Object(O.jsx)("label",{children:"Default value"}),Object(O.jsx)(c.a,{mode:"json",onChange:function(n){try{w(JSON.parse(n))}catch(e){}},value:"object"===typeof v?JSON.stringify(v,null,2):v})]}),Object(O.jsxs)("div",{className:"col-4 px-2",children:[Object(O.jsx)("label",{children:"Generated form"}),f&&Object(O.jsx)("span",{style:{color:"tomato"},children:f}),Object(O.jsx)("div",{style:{backgroundColor:"#ececec",padding:"10px 15px"},children:Object(O.jsx)(x,{ref:J,children:Object(O.jsx)(c.b,{ref:q,schema:u,value:v,flow:Object.keys(u),onSubmit:function(n){return alert(JSON.stringify(n,null,2))}})})}),Object(O.jsx)("div",{className:"py-2",children:Object(O.jsx)("label",{children:"Form state"})})]})]})]})},w=t(48),N=t(425),S=t(86),k=t(200),C=function(){var n=Object(a.useState)(c.e.string),e=Object(s.a)(n,2),t=e[0],l=e[1];return Object(O.jsx)("div",{className:"container",style:{marginTop:"70px"},children:Object(O.jsxs)("div",{className:"d-flex",children:[Object(O.jsx)("div",{className:"col-3",style:{marginRight:"10px"},children:Object(O.jsxs)("div",{style:{backgroundColor:"#ececec",marginTop:"25px",marginRight:"15px",padding:"15px"},children:[Object(O.jsx)("b",{children:"Filter"}),Object(O.jsx)("ul",{children:Object.keys(c.e).map((function(n){return Object(O.jsx)("li",{onClick:function(){return l(n)},style:{cursor:"pointer",textDecoration:"underline",fontWeight:n===t?"bold":"normal"},children:n},"filter-".concat(n))}))})]})}),Object(O.jsx)("div",{className:"col-9",style:{marginRight:"10px"},children:Object.keys(k).map((function(n){return Object(S.a)({key:n},k[n])})).filter((function(n){var e=n.type;return t===e})).map((function(n,e){var t=n.key,a=Object(N.a)(n,["key"]);return Object(O.jsxs)(x,{children:[Object(O.jsxs)("label",{style:{fontWeight:"bold"},children:["Input type ",a.type,a.format&&" (format: ".concat(a.format,")")]}),Object(O.jsx)("div",{style:{backgroundColor:"#ececec",padding:"10px 15px",marginBottom:"15px"},children:Object(O.jsx)(c.b,{schema:Object(w.a)({},t,Object(S.a)({constraints:[c.d.required("".concat(t," is required"))]},a)),flow:[t],onSubmit:function(n){return alert(JSON.stringify(n,null,2))},options:{actions:{submit:{label:"Show It!"}}}})})]},"form-".concat(t,"-").concat(e))}))})]})})},J=function(n){var e,t=n.tabs,l=n.defaultTab,r=Object(a.useState)(l),o=Object(s.a)(r,2),c=o[0],i=o[1];return Object(O.jsxs)("div",{className:"my-md-4 bd-layout",children:[Object(O.jsx)("nav",{className:"navbar navbar-expand-lg navbar-light bg-light fixed-top",children:Object(O.jsxs)("div",{className:"container-fluid",children:[Object(O.jsx)("span",{className:"navbar-brand",children:"react-forms playground"}),Object(O.jsx)("button",{className:"navbar-toggler",type:"button","data-bs-toggle":"collapse","data-bs-target":"#navbarSupportedContent","aria-controls":"navbarSupportedContent","aria-expanded":"false","aria-label":"Toggle navigation",children:Object(O.jsx)("span",{className:"navbar-toggler-icon"})}),Object(O.jsx)("div",{className:"collapse navbar-collapse",id:"navbarSupportedContent",children:Object(O.jsxs)("ul",{className:"navbar-nav me-auto mb-2 mb-lg-0",children:[t.map((function(n){var e=n.id,t=n.label;return Object(O.jsx)("li",{className:"nav-item",children:Object(O.jsx)("span",{className:"nav-link",onClick:function(){return i(e)},children:t})})})),Object(O.jsx)("li",{className:"nav-item",children:Object(O.jsx)("a",{className:"nav-link",href:"https://github.com/MAIF/react-forms#readme",children:"Documentation"})}),Object(O.jsx)("li",{className:"nav-item",children:Object(O.jsx)("a",{className:"nav-link",href:"https://github.com/MAIF/react-forms",children:"Project"})})]})})]})}),Object(O.jsx)("div",{className:"container",style:{marginTop:"70px"},children:null===(e=t.find((function(n){return n.id===c})))||void 0===e?void 0:e.content})]})};t(39);function q(){var n=Object(a.useState)({firstname:null,lastname:"Foo",age:26}),e=Object(s.a)(n,2),t=e[0],l=e[1];console.log(t);return console.log(t),Object(O.jsxs)(O.Fragment,{children:[Object(O.jsx)(c.b,{value:t,schema:{firstname:{type:"string"},lastname:{type:"string"},skills:{type:"object",format:"form",array:!0,schema:{competence:{type:"string"}}}},options:{autosubmit:!0},onSubmit:function(n){console.log(n),l(n)}}),Object(O.jsx)(A,{data:t})]})}var A=function(n){var e=n.data;return console.log("render toto",e),Object(O.jsx)("h1",{children:JSON.stringify(e,null,4)})};o.a.render(Object(O.jsx)(l.a.StrictMode,{children:Object(O.jsx)(J,{tabs:[{id:"playground",label:"Playground",content:Object(O.jsx)(v,{})},{id:"release-candidate",label:"Release Candidate",content:Object(O.jsx)(q,{})},{id:"storybook",label:"Storybook",content:Object(O.jsx)(C,{})}],defaultTab:"playground"})}),document.getElementById("root"))},312:function(n,e){},418:function(n){n.exports=JSON.parse('{"name":{"type":"string","label":"name","placeholder":"Your name","constraints":[{"type":"required","message":"required field"}]},"age":{"type":"number","label":"Your age","constraints":[{"type":"required","message":"required field"},{"type":"min","ref":18,"message":"You must be an adult"}]}}')},419:function(n){n.exports=JSON.parse('{"oldPassword":{"type":"string","format":"password","label":"Old Password","constraints":[{"type":"required","message":"Your old password is required"}]},"newPassword":{"type":"string","format":"password","label":"New password","constraints":[{"type":"required","message":"Your new password is required"}]},"confirmNewPassword":{"type":"string","format":"password","label":"Confirm new password","constraints":[{"type":"required","message":"confirm password is required"},{"type":"oneOf","arrayOfValues":[{"ref":"newPassword"}],"message":"confirm and password must be equal"}]}}')},420:function(n){n.exports=JSON.parse('{"type":{"type":"string","label":"type","format":"select","options":["mammal","fish","bird","insect"],"defaultValue":"fish"}}')},421:function(n){n.exports=JSON.parse('{"type":{"type":"string","label":"type","format":"select","options":["mammal","fish","bird","insect"],"defaultValue":"fish"},"habitat":{"type":"object","label":"habitat","format":"form","schema":{"continent":{"type":"string","label":"continent","format":"select","options":["Africa","Asia","Europe","North America","Oc\xe9ania","South America"]},"country":{"type":"string","label":"country"}}}}')},422:function(n){n.exports=JSON.parse('{"type":{"type":"string","label":"type","format":"select","options":["mammal","fish","bird","insect"],"defaultValue":"fish"},"habitat":{"type":"object","label":"habitat","format":"form","conditionalSchema":{"ref":"type","switch":[{"condition":"fish","schema":{"sea":{"type":"string","label":"ocean or sea"}},"flow":["sea"]},{"default":true,"schema":{"continent":{"type":"string","label":"continent","format":"select","options":["Africa","Asia","Europe","North America","Oc\xe9ania","South America"]},"country":{"type":"string","label":"country"}},"flow":["continent","country"]}]}}}')},435:function(n,e,t){},962:function(n,e){},963:function(n,e){}},[[2309,1,2]]]);
//# sourceMappingURL=main.54bc6572.chunk.js.map