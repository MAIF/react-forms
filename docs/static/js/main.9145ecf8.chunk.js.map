{"version":3,"sources":["WrapperError.js","Playground.js","schema/formArray.js","index.js"],"names":["WrapperError","state","error","undefined","this","setState","props","children","React","Component","examples","basic","formArray","constrainedBasic","constraintsWithRef","simpleSelector","formInForm","dynamicForm","Playground","useState","JSON","stringify","schema","setSchema","realSchema","setRealSchema","setError","value","setValue","ref","useRef","childRef","useEffect","current","reset","babelize","e","code","generatedCode","babel","presets","replace","trim","res","Function","func","_","className","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","href","style","marginTop","marginRight","htmlFor","possibleValues","Object","entries","transformer","label","defaultValue","onChange","mode","err","console","log","parse","color","backgroundColor","padding","flow","keys","onSubmit","d","alert","options","watch","unsaved","dispatch","changes","from","to","doc","length","insert","actions","submit","setRef","r","showGutter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9145ecf8.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class WrapperError extends React.Component {\n    state = {\n        error: undefined\n    }\n\n    componentDidCatch(error) {\n        this.setState({ error })\n    }\n\n    reset() {\n        this.setState({ error: undefined })\n    }\n\n    render() {\n        if (this.state.error)\n            return <div>Something wrong happened</div>\n        return this.props.children\n    }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { Form, CodeInput, SelectInput } from '@maif/react-forms'\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport basic from './schema/basic.json';\nimport formArray from './schema/formArray';\nimport constrainedBasic from './schema/constrainedBasic.json';\nimport constraintsWithRef from './schema/constraintsWithRef.json';\nimport simpleSelector from './schema/selector.json';\nimport formInForm from './schema/formInForm.json';\nimport dynamicForm from './schema/dynamicForm.json';\nimport * as babel from 'babel-standalone'\nimport WrapperError from './WrapperError';\n\nconst examples = {\n  basic,\n  formArray,\n  constrainedBasic,\n  constraintsWithRef,\n  simpleSelector,\n  formInForm,\n  dynamicForm\n}\n\nexport const Playground = () => {\n  const [schema, setSchema] = useState(JSON.stringify(basic, 0, 2))\n  const [realSchema, setRealSchema] = useState(basic)\n  const [error, setError] = useState(undefined)\n  const [value, setValue] = useState()\n  const ref = useRef()\n\n  const childRef = useRef()\n\n  useEffect(() => {\n    if (childRef.current)\n      childRef.current.reset()\n    babelize(schema)\n  }, [schema])\n\n  useEffect(() => {\n    setError(undefined)\n  }, [realSchema])\n\n  const babelize = e => {\n    try {\n      const code = `() => { try { return ${(typeof e === 'object' ? JSON.stringify(e, null, 2) : e)} } catch(err) {} }`\n      const babelCode = babel.transform(code, { presets: ['react', 'es2015'] }).code;\n\n      const generatedCode = babelCode.replace('\"use strict\";', \"\").trim()\n      const func = new Function(\"React\", `return ${generatedCode}`);\n      const res = func(React)()\n      if (res)\n        setRealSchema(res)\n    } catch (_) {\n\n    }\n  }\n\n  return (\n    <div className=\"my-md-4 bd-layout\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\n        <div className=\"container-fluid\">\n          <span className=\"navbar-brand\">react-forms playground</span>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"https://github.com/MAIF/react-forms#readme\">Documentation</a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"https://github.com/MAIF/react-forms\">Project</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      <div className=\"container\" style={{ marginTop: '70px' }}>\n        <em className='tagline px-0 py-2'>Choose a JSON schema below and check the generated form. Check the <a href='https://github.com/MAIF/react-forms'>documentation</a> for more details.</em>\n        <div className=\"d-flex\">\n          <div className='col-8' style={{ marginRight: '10px' }}>\n            <label htmlFor=\"selector\">Try with a schema</label>\n            <SelectInput\n              className=\"py-2\"\n              possibleValues={Object.entries(examples)}\n              transformer={([key, value]) => ({ label: key, value })}\n              defaultValue={{ value: basic, label: \"basic\" }}\n              onChange={setSchema}\n            />\n            <CodeInput\n              mode=\"javascript\"\n              onChange={e => {\n                try {\n                  setSchema(e)\n                } catch (err) {\n                  console.log(err)\n                }\n              }}\n              value={typeof schema === 'object' ? JSON.stringify(schema, null, 2) : schema}\n            />\n            <label>Default value</label>\n            <CodeInput\n              mode=\"json\"\n              onChange={e => {\n                try {\n                  setValue(JSON.parse(e))\n                } catch (_) { }\n              }}\n              value={typeof value === 'object' ? JSON.stringify(value, null, 2) : value}\n            />\n          </div>\n          <div className='col-4 px-2'>\n            <label>Generated form</label>\n            {error && <span style={{ color: 'tomato' }}>{error}</span>}\n            <div style={{ backgroundColor: '#ececec', padding: '10px 15px' }}>\n              <WrapperError ref={childRef}>\n                <Form\n                  schema={realSchema}\n                  value={value}\n                  flow={Object.keys(realSchema)}\n                  onSubmit={d => alert(JSON.stringify(d, null, 2))}\n                  options={{\n                    watch: unsaved => ref?.current?.dispatch({\n                      changes: {\n                        from: 0,\n                        to: ref.current.state.doc.length,\n                        insert: JSON.stringify(unsaved, null, 2)\n                      }\n                    }),\n                    actions: {\n                      submit: {\n                        label: 'Try it'\n                      }\n                    }\n                  }}\n                />\n              </WrapperError>\n            </div>\n            <div className='py-2'>\n              <label>Form state</label>\n              <CodeInput\n                setRef={r => ref.current = r}\n                showGutter={false}\n                mode=\"json\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Playground;\n","const schema = `{\n    \"users\": {\n        type: \"object\",\n        format: \"form\",\n        array: true,\n        schema: {\n            fullname: {\n                type: \"string\",\n                render: (props) => {\n                    const { setValues, setValue, value, onChange } = props\n                    console.log(\"coucou\")\n                    return <input\n                        type=\"text\"\n                        onChange={e => onChange(e.target.value)}\n                        value={value}\n                    />\n                }\n\n            },\n            firstname: {\n                type: \"string\"\n            },\n            lastname: {\n                type: \"string\"\n            }\n        }\n    }\n}`\n\nexport default schema","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Playground from './Playground';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Playground />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}